package Vulkan

extern
{
	VkResult vkCreateInstance(pCreateInfo: *VkInstanceCreateInfo, pAllocator: *VkAllocationCallbacks, pInstance: *VkInstance);
	void vkDestroyInstance(instance: VkInstance, pAllocator: *VkAllocationCallbacks);
	VkResult vkEnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: *uint32, pPhysicalDevices: *VkPhysicalDevice);
	void vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: *VkPhysicalDeviceFeatures);
	void vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *VkFormatProperties);
	VkResult vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: *VkImageFormatProperties);
	void vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: *VkPhysicalDeviceProperties);
	void vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *uint32, pQueueFamilyProperties: *VkQueueFamilyProperties);
	void vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: *VkPhysicalDeviceMemoryProperties);
	PFN_vkVoidFunction vkGetInstanceProcAddr(instance: VkInstance, pName: *byte);
	PFN_vkVoidFunction vkGetDeviceProcAddr(device: VkDevice, pName: *byte);
	VkResult vkCreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: *VkDeviceCreateInfo, pAllocator: *VkAllocationCallbacks, pDevice: *VkDevice);
	void vkDestroyDevice(device: VkDevice, pAllocator: *VkAllocationCallbacks);
	VkResult vkEnumerateInstanceExtensionProperties(pLayerName: *byte, pPropertyCount: *uint32, pProperties: *VkExtensionProperties);
	VkResult vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: *byte, pPropertyCount: *uint32, pProperties: *VkExtensionProperties);
	VkResult vkEnumerateInstanceLayerProperties(pPropertyCount: *uint32, pProperties: *VkLayerProperties);
	VkResult vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkLayerProperties);
	void vkGetDeviceQueue(device: VkDevice, queueFamilyIndex: uint32, queueIndex: uint32, pQueue: *VkQueue);
	VkResult vkQueueSubmit(queue: VkQueue, submitCount: uint32, pSubmits: *VkSubmitInfo, fence: VkFence);
	VkResult vkQueueWaitIdle(queue: VkQueue);
	VkResult vkDeviceWaitIdle(device: VkDevice);
	VkResult vkAllocateMemory(device: VkDevice, pAllocateInfo: *VkMemoryAllocateInfo, pAllocator: *VkAllocationCallbacks, pMemory: *VkDeviceMemory);
	void vkFreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: *VkAllocationCallbacks);
	VkResult vkMapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: **void);
	void vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory);
	VkResult vkFlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: *VkMappedMemoryRange);
	VkResult vkInvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: *VkMappedMemoryRange);
	void vkGetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: *VkDeviceSize);
	VkResult vkBindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize);
	VkResult vkBindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize);
	void vkGetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: *VkMemoryRequirements);
	void vkGetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: *VkMemoryRequirements);
	void vkGetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: *uint32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements);
	void vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: *uint32, pProperties: *VkSparseImageFormatProperties);
	VkResult vkQueueBindSparse(queue: VkQueue, bindInfoCount: uint32, pBindInfo: *VkBindSparseInfo, fence: VkFence);
	VkResult vkCreateFence(device: VkDevice, pCreateInfo: *VkFenceCreateInfo, pAllocator: *VkAllocationCallbacks, pFence: *VkFence);
	void vkDestroyFence(device: VkDevice, fence: VkFence, pAllocator: *VkAllocationCallbacks);
	VkResult vkResetFences(device: VkDevice, fenceCount: uint32, pFences: *VkFence);
	VkResult vkGetFenceStatus(device: VkDevice, fence: VkFence);
	VkResult vkWaitForFences(device: VkDevice, fenceCount: uint32, pFences: *VkFence, waitAll: VkBool32, timeout: uint64);
	VkResult vkCreateSemaphore(device: VkDevice, pCreateInfo: *VkSemaphoreCreateInfo, pAllocator: *VkAllocationCallbacks, pSemaphore: *VkSemaphore);
	void vkDestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateEvent(device: VkDevice, pCreateInfo: *VkEventCreateInfo, pAllocator: *VkAllocationCallbacks, pEvent: *VkEvent);
	void vkDestroyEvent(device: VkDevice, event: VkEvent, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetEventStatus(device: VkDevice, event: VkEvent);
	VkResult vkSetEvent(device: VkDevice, event: VkEvent);
	VkResult vkResetEvent(device: VkDevice, event: VkEvent);
	VkResult vkCreateQueryPool(device: VkDevice, pCreateInfo: *VkQueryPoolCreateInfo, pAllocator: *VkAllocationCallbacks, pQueryPool: *VkQueryPool);
	void vkDestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dataSize: size_t, pData: *void, stride: VkDeviceSize, flags: VkQueryResultFlags);
	VkResult vkCreateBuffer(device: VkDevice, pCreateInfo: *VkBufferCreateInfo, pAllocator: *VkAllocationCallbacks, pBuffer: *VkBuffer);
	void vkDestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateBufferView(device: VkDevice, pCreateInfo: *VkBufferViewCreateInfo, pAllocator: *VkAllocationCallbacks, pView: *VkBufferView);
	void vkDestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateImage(device: VkDevice, pCreateInfo: *VkImageCreateInfo, pAllocator: *VkAllocationCallbacks, pImage: *VkImage);
	void vkDestroyImage(device: VkDevice, image: VkImage, pAllocator: *VkAllocationCallbacks);
	void vkGetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: *VkImageSubresource, pLayout: *VkSubresourceLayout);
	VkResult vkCreateImageView(device: VkDevice, pCreateInfo: *VkImageViewCreateInfo, pAllocator: *VkAllocationCallbacks, pView: *VkImageView);
	void vkDestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateShaderModule(device: VkDevice, pCreateInfo: *VkShaderModuleCreateInfo, pAllocator: *VkAllocationCallbacks, pShaderModule: *VkShaderModule);
	void vkDestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreatePipelineCache(device: VkDevice, pCreateInfo: *VkPipelineCacheCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelineCache: *VkPipelineCache);
	void vkDestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: *size_t, pData: *void);
	VkResult vkMergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: uint32, pSrcCaches: *VkPipelineCache);
	VkResult vkCreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: *VkGraphicsPipelineCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline);
	VkResult vkCreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: *VkComputePipelineCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline);
	void vkDestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreatePipelineLayout(device: VkDevice, pCreateInfo: *VkPipelineLayoutCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelineLayout: *VkPipelineLayout);
	void vkDestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateSampler(device: VkDevice, pCreateInfo: *VkSamplerCreateInfo, pAllocator: *VkAllocationCallbacks, pSampler: *VkSampler);
	void vkDestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateDescriptorSetLayout(device: VkDevice, pCreateInfo: *VkDescriptorSetLayoutCreateInfo, pAllocator: *VkAllocationCallbacks, pSetLayout: *VkDescriptorSetLayout);
	void vkDestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateDescriptorPool(device: VkDevice, pCreateInfo: *VkDescriptorPoolCreateInfo, pAllocator: *VkAllocationCallbacks, pDescriptorPool: *VkDescriptorPool);
	void vkDestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: *VkAllocationCallbacks);
	VkResult vkResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags);
	VkResult vkAllocateDescriptorSets(device: VkDevice, pAllocateInfo: *VkDescriptorSetAllocateInfo, pDescriptorSets: *VkDescriptorSet);
	VkResult vkFreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pDescriptorSets: *VkDescriptorSet);
	void vkUpdateDescriptorSets(device: VkDevice, descriptorWriteCount: uint32, pDescriptorWrites: *VkWriteDescriptorSet, descriptorCopyCount: uint32, pDescriptorCopies: *VkCopyDescriptorSet);
	VkResult vkCreateFramebuffer(device: VkDevice, pCreateInfo: *VkFramebufferCreateInfo, pAllocator: *VkAllocationCallbacks, pFramebuffer: *VkFramebuffer);
	void vkDestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateRenderPass(device: VkDevice, pCreateInfo: *VkRenderPassCreateInfo, pAllocator: *VkAllocationCallbacks, pRenderPass: *VkRenderPass);
	void vkDestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: *VkAllocationCallbacks);
	void vkGetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: *VkExtent2D);
	VkResult vkCreateCommandPool(device: VkDevice, pCreateInfo: *VkCommandPoolCreateInfo, pAllocator: *VkAllocationCallbacks, pCommandPool: *VkCommandPool);
	void vkDestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: *VkAllocationCallbacks);
	VkResult vkResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags);
	VkResult vkAllocateCommandBuffers(device: VkDevice, pAllocateInfo: *VkCommandBufferAllocateInfo, pCommandBuffers: *VkCommandBuffer);
	void vkFreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: uint32, pCommandBuffers: *VkCommandBuffer);
	VkResult vkBeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: *VkCommandBufferBeginInfo);
	VkResult vkEndCommandBuffer(commandBuffer: VkCommandBuffer);
	VkResult vkResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags);
	void vkCmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline);
	void vkCmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewports: *VkViewport);
	void vkCmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: uint32, scissorCount: uint32, pScissors: *VkRect2D);
	void vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: :float);
	void vkCmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: :float, depthBiasClamp: :float, depthBiasSlopeFactor: :float);
	void vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: :array);
	void vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: :float, maxDepthBounds: :float);
	void vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: uint32);
	void vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: uint32);
	void vkCmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: uint32);
	void vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: *VkDescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: *uint32);
	void vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType);
	void vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: *VkBuffer, pOffsets: *VkDeviceSize);
	void vkCmdDraw(commandBuffer: VkCommandBuffer, vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32);
	void vkCmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32_t, firstInstance: uint32);
	void vkCmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32);
	void vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32);
	void vkCmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32);
	void vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize);
	void vkCmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: *VkBufferCopy);
	void vkCmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: *VkImageCopy);
	void vkCmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: *VkImageBlit, filter: VkFilter);
	void vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: *VkBufferImageCopy);
	void vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: *VkBufferImageCopy);
	void vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: *void);
	void vkCmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: uint32);
	void vkCmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: *VkClearColorValue, rangeCount: uint32, pRanges: *VkImageSubresourceRange);
	void vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: *VkClearDepthStencilValue, rangeCount: uint32, pRanges: *VkImageSubresourceRange);
	void vkCmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: uint32, pAttachments: *VkClearAttachment, rectCount: uint32, pRects: *VkClearRect);
	void vkCmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: *VkImageResolve);
	void vkCmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags);
	void vkCmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags);
	void vkCmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: *VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: uint32, pMemoryBarriers: *VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: *VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: *VkImageMemoryBarrier);
	void vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: *VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: *VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: *VkImageMemoryBarrier);
	void vkCmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags);
	void vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32);
	void vkCmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32);
	void vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: uint32);
	void vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags);
	void vkCmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: *void);
	void vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: *VkRenderPassBeginInfo, contents: VkSubpassContents);
	void vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents);
	void vkCmdEndRenderPass(commandBuffer: VkCommandBuffer);
	void vkCmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: uint32, pCommandBuffers: *VkCommandBuffer);
	VkResult vkEnumerateInstanceVersion(pApiVersion: *uint32);
	VkResult vkBindBufferMemory2(device: VkDevice, bindInfoCount: uint32, pBindInfos: *VkBindBufferMemoryInfo);
	VkResult vkBindImageMemory2(device: VkDevice, bindInfoCount: uint32, pBindInfos: *VkBindImageMemoryInfo);
	void vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: *VkPeerMemoryFeatureFlags);
	void vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: uint32);
	void vkCmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32);
	VkResult vkEnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: *uint32, pPhysicalDeviceGroupProperties: *VkPhysicalDeviceGroupProperties);
	void vkGetImageMemoryRequirements2(device: VkDevice, pInfo: *VkImageMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetBufferMemoryRequirements2(device: VkDevice, pInfo: *VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetImageSparseMemoryRequirements2(device: VkDevice, pInfo: *VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *uint32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements2);
	void vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: *VkPhysicalDeviceFeatures2);
	void vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: *VkPhysicalDeviceProperties2);
	void vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *VkFormatProperties2);
	VkResult vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: *VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *VkImageFormatProperties2);
	void vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *uint32, pQueueFamilyProperties: *VkQueueFamilyProperties2);
	void vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: *VkPhysicalDeviceMemoryProperties2);
	void vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: *VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *uint32, pProperties: *VkSparseImageFormatProperties2);
	void vkTrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags);
	void vkGetDeviceQueue2(device: VkDevice, pQueueInfo: *VkDeviceQueueInfo2, pQueue: *VkQueue);
	VkResult vkCreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: *VkSamplerYcbcrConversionCreateInfo, pAllocator: *VkAllocationCallbacks, pYcbcrConversion: *VkSamplerYcbcrConversion);
	void vkDestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: *VkDescriptorUpdateTemplateCreateInfo, pAllocator: *VkAllocationCallbacks, pDescriptorUpdateTemplate: *VkDescriptorUpdateTemplate);
	void vkDestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *VkAllocationCallbacks);
	void vkUpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *void);
	void vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *VkExternalBufferProperties);
	void vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *VkExternalFenceProperties);
	void vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *VkExternalSemaphoreProperties);
	void vkGetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: *VkDescriptorSetLayoutCreateInfo, pSupport: *VkDescriptorSetLayoutSupport);
	void vkCmdDrawIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
	void vkCmdDrawIndexedIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
	VkResult vkCreateRenderPass2(device: VkDevice, pCreateInfo: *VkRenderPassCreateInfo2, pAllocator: *VkAllocationCallbacks, pRenderPass: *VkRenderPass);
	void vkCmdBeginRenderPass2(commandBuffer: VkCommandBuffer, pRenderPassBegin: *VkRenderPassBeginInfo, pSubpassBeginInfo: *VkSubpassBeginInfo);
	void vkCmdNextSubpass2(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *VkSubpassBeginInfo, pSubpassEndInfo: *VkSubpassEndInfo);
	void vkCmdEndRenderPass2(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *VkSubpassEndInfo);
	void vkResetQueryPool(device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32);
	VkResult vkGetSemaphoreCounterValue(device: VkDevice, semaphore: VkSemaphore, pValue: *uint64);
	VkResult vkWaitSemaphores(device: VkDevice, pWaitInfo: *VkSemaphoreWaitInfo, timeout: uint64);
	VkResult vkSignalSemaphore(device: VkDevice, pSignalInfo: *VkSemaphoreSignalInfo);
	VkDeviceAddress vkGetBufferDeviceAddress(device: VkDevice, pInfo: *VkBufferDeviceAddressInfo);
	uint64 vkGetBufferOpaqueCaptureAddress(device: VkDevice, pInfo: *VkBufferDeviceAddressInfo);
	uint64 vkGetDeviceMemoryOpaqueCaptureAddress(device: VkDevice, pInfo: *VkDeviceMemoryOpaqueCaptureAddressInfo);
	VkResult vkGetPhysicalDeviceToolProperties(physicalDevice: VkPhysicalDevice, pToolCount: *uint32, pToolProperties: *VkPhysicalDeviceToolProperties);
	VkResult vkCreatePrivateDataSlot(device: VkDevice, pCreateInfo: *VkPrivateDataSlotCreateInfo, pAllocator: *VkAllocationCallbacks, pPrivateDataSlot: *VkPrivateDataSlot);
	void vkDestroyPrivateDataSlot(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: *VkAllocationCallbacks);
	VkResult vkSetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, data: uint64);
	void vkGetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, pData: *uint64);
	void vkCmdSetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: *VkDependencyInfo);
	void vkCmdResetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2);
	void vkCmdWaitEvents2(commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: *VkEvent, pDependencyInfos: *VkDependencyInfo);
	void vkCmdPipelineBarrier2(commandBuffer: VkCommandBuffer, pDependencyInfo: *VkDependencyInfo);
	void vkCmdWriteTimestamp2(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: uint32);
	VkResult vkQueueSubmit2(queue: VkQueue, submitCount: uint32, pSubmits: *VkSubmitInfo2, fence: VkFence);
	void vkCmdCopyBuffer2(commandBuffer: VkCommandBuffer, pCopyBufferInfo: *VkCopyBufferInfo2);
	void vkCmdCopyImage2(commandBuffer: VkCommandBuffer, pCopyImageInfo: *VkCopyImageInfo2);
	void vkCmdCopyBufferToImage2(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: *VkCopyBufferToImageInfo2);
	void vkCmdCopyImageToBuffer2(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: *VkCopyImageToBufferInfo2);
	void vkCmdBlitImage2(commandBuffer: VkCommandBuffer, pBlitImageInfo: *VkBlitImageInfo2);
	void vkCmdResolveImage2(commandBuffer: VkCommandBuffer, pResolveImageInfo: *VkResolveImageInfo2);
	void vkCmdBeginRendering(commandBuffer: VkCommandBuffer, pRenderingInfo: *VkRenderingInfo);
	void vkCmdEndRendering(commandBuffer: VkCommandBuffer);
	void vkCmdSetCullMode(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
	void vkCmdSetFrontFace(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
	void vkCmdSetPrimitiveTopology(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology);
	void vkCmdSetViewportWithCount(commandBuffer: VkCommandBuffer, viewportCount: uint32, pViewports: *VkViewport);
	void vkCmdSetScissorWithCount(commandBuffer: VkCommandBuffer, scissorCount: uint32, pScissors: *VkRect2D);
	void vkCmdBindVertexBuffers2(commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: *VkBuffer, pOffsets: *VkDeviceSize, pSizes: *VkDeviceSize, pStrides: *VkDeviceSize);
	void vkCmdSetDepthTestEnable(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
	void vkCmdSetDepthWriteEnable(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
	void vkCmdSetDepthCompareOp(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
	void vkCmdSetDepthBoundsTestEnable(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32);
	void vkCmdSetStencilTestEnable(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32);
	void vkCmdSetStencilOp(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp);
	void vkCmdSetRasterizerDiscardEnable(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32);
	void vkCmdSetDepthBiasEnable(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32);
	void vkCmdSetPrimitiveRestartEnable(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32);
	void vkGetDeviceBufferMemoryRequirements(device: VkDevice, pInfo: *VkDeviceBufferMemoryRequirements, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetDeviceImageMemoryRequirements(device: VkDevice, pInfo: *VkDeviceImageMemoryRequirements, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetDeviceImageSparseMemoryRequirements(device: VkDevice, pInfo: *VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: *uint32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements2);
	void vkCmdSetLineStipple(commandBuffer: VkCommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16_t);
	VkResult vkMapMemory2(device: VkDevice, pMemoryMapInfo: *VkMemoryMapInfo, ppData: **void);
	VkResult vkUnmapMemory2(device: VkDevice, pMemoryUnmapInfo: *VkMemoryUnmapInfo);
	void vkCmdBindIndexBuffer2(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, indexType: VkIndexType);
	void vkGetRenderingAreaGranularity(device: VkDevice, pRenderingAreaInfo: *VkRenderingAreaInfo, pGranularity: *VkExtent2D);
	void vkGetDeviceImageSubresourceLayout(device: VkDevice, pInfo: *VkDeviceImageSubresourceInfo, pLayout: *VkSubresourceLayout2);
	void vkGetImageSubresourceLayout2(device: VkDevice, image: VkImage, pSubresource: *VkImageSubresource2, pLayout: *VkSubresourceLayout2);
	void vkCmdPushDescriptorSet(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: *VkWriteDescriptorSet);
	void vkCmdPushDescriptorSetWithTemplate(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: *void);
	void vkCmdSetRenderingAttachmentLocations(commandBuffer: VkCommandBuffer, pLocationInfo: *VkRenderingAttachmentLocationInfo);
	void vkCmdSetRenderingInputAttachmentIndices(commandBuffer: VkCommandBuffer, pInputAttachmentIndexInfo: *VkRenderingInputAttachmentIndexInfo);
	void vkCmdBindDescriptorSets2(commandBuffer: VkCommandBuffer, pBindDescriptorSetsInfo: *VkBindDescriptorSetsInfo);
	void vkCmdPushConstants2(commandBuffer: VkCommandBuffer, pPushConstantsInfo: *VkPushConstantsInfo);
	void vkCmdPushDescriptorSet2(commandBuffer: VkCommandBuffer, pPushDescriptorSetInfo: *VkPushDescriptorSetInfo);
	void vkCmdPushDescriptorSetWithTemplate2(commandBuffer: VkCommandBuffer, pPushDescriptorSetWithTemplateInfo: *VkPushDescriptorSetWithTemplateInfo);
	VkResult vkCopyMemoryToImage(device: VkDevice, pCopyMemoryToImageInfo: *VkCopyMemoryToImageInfo);
	VkResult vkCopyImageToMemory(device: VkDevice, pCopyImageToMemoryInfo: *VkCopyImageToMemoryInfo);
	VkResult vkCopyImageToImage(device: VkDevice, pCopyImageToImageInfo: *VkCopyImageToImageInfo);
	VkResult vkTransitionImageLayout(device: VkDevice, transitionCount: uint32, pTransitions: *VkHostImageLayoutTransitionInfo);
	void vkDestroySurfaceKHR(instance: VkInstance, surface: VkSurfaceKHR, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, surface: VkSurfaceKHR, pSupported: *VkBool32);
	VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *VkSurfaceCapabilitiesKHR);
	VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: *uint32, pSurfaceFormats: *VkSurfaceFormatKHR);
	VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: *uint32, pPresentModes: *VkPresentModeKHR);
	VkResult vkCreateSwapchainKHR(device: VkDevice, pCreateInfo: *VkSwapchainCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSwapchain: *VkSwapchainKHR);
	void vkDestroySwapchainKHR(device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetSwapchainImagesKHR(device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: *uint32, pSwapchainImages: *VkImage);
	VkResult vkAcquireNextImageKHR(device: VkDevice, swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: *uint32);
	VkResult vkQueuePresentKHR(queue: VkQueue, pPresentInfo: *VkPresentInfoKHR);
	VkResult vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice, pDeviceGroupPresentCapabilities: *VkDeviceGroupPresentCapabilitiesKHR);
	VkResult vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice, surface: VkSurfaceKHR, pModes: *VkDeviceGroupPresentModeFlagsKHR);
	VkResult vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: *uint32, pRects: *VkRect2D);
	VkResult vkAcquireNextImage2KHR(device: VkDevice, pAcquireInfo: *VkAcquireNextImageInfoKHR, pImageIndex: *uint32);
	VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkDisplayPropertiesKHR);
	VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkDisplayPlanePropertiesKHR);
	VkResult vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice, planeIndex: uint32, pDisplayCount: *uint32, pDisplays: *VkDisplayKHR);
	VkResult vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *uint32, pProperties: *VkDisplayModePropertiesKHR);
	VkResult vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: *VkDisplayModeCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pMode: *VkDisplayModeKHR);
	VkResult vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: uint32, pCapabilities: *VkDisplayPlaneCapabilitiesKHR);
	VkResult vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance, pCreateInfo: *VkDisplaySurfaceCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSurface: *VkSurfaceKHR);
	VkResult vkCreateSharedSwapchainsKHR(device: VkDevice, swapchainCount: uint32, pCreateInfos: *VkSwapchainCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSwapchains: *VkSwapchainKHR);
	VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice: VkPhysicalDevice, pVideoProfile: *VkVideoProfileInfoKHR, pCapabilities: *VkVideoCapabilitiesKHR);
	VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice: VkPhysicalDevice, pVideoFormatInfo: *VkPhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: *uint32, pVideoFormatProperties: *VkVideoFormatPropertiesKHR);
	VkResult vkCreateVideoSessionKHR(device: VkDevice, pCreateInfo: *VkVideoSessionCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pVideoSession: *VkVideoSessionKHR);
	void vkDestroyVideoSessionKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetVideoSessionMemoryRequirementsKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pMemoryRequirementsCount: *uint32, pMemoryRequirements: *VkVideoSessionMemoryRequirementsKHR);
	VkResult vkBindVideoSessionMemoryKHR(device: VkDevice, videoSession: VkVideoSessionKHR, bindSessionMemoryInfoCount: uint32, pBindSessionMemoryInfos: *VkBindVideoSessionMemoryInfoKHR);
	VkResult vkCreateVideoSessionParametersKHR(device: VkDevice, pCreateInfo: *VkVideoSessionParametersCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pVideoSessionParameters: *VkVideoSessionParametersKHR);
	VkResult vkUpdateVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pUpdateInfo: *VkVideoSessionParametersUpdateInfoKHR);
	void vkDestroyVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pAllocator: *VkAllocationCallbacks);
	void vkCmdBeginVideoCodingKHR(commandBuffer: VkCommandBuffer, pBeginInfo: *VkVideoBeginCodingInfoKHR);
	void vkCmdEndVideoCodingKHR(commandBuffer: VkCommandBuffer, pEndCodingInfo: *VkVideoEndCodingInfoKHR);
	void vkCmdControlVideoCodingKHR(commandBuffer: VkCommandBuffer, pCodingControlInfo: *VkVideoCodingControlInfoKHR);
	void vkCmdDecodeVideoKHR(commandBuffer: VkCommandBuffer, pDecodeInfo: *VkVideoDecodeInfoKHR);
	void vkCmdBeginRenderingKHR(commandBuffer: VkCommandBuffer, pRenderingInfo: *VkRenderingInfo);
	void vkCmdEndRenderingKHR(commandBuffer: VkCommandBuffer);
	void vkGetPhysicalDeviceFeatures2KHR(physicalDevice: VkPhysicalDevice, pFeatures: *VkPhysicalDeviceFeatures2);
	void vkGetPhysicalDeviceProperties2KHR(physicalDevice: VkPhysicalDevice, pProperties: *VkPhysicalDeviceProperties2);
	void vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *VkFormatProperties2);
	VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pImageFormatInfo: *VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *VkImageFormatProperties2);
	void vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *uint32, pQueueFamilyProperties: *VkQueueFamilyProperties2);
	void vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice: VkPhysicalDevice, pMemoryProperties: *VkPhysicalDeviceMemoryProperties2);
	void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pFormatInfo: *VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *uint32, pProperties: *VkSparseImageFormatProperties2);
	void vkGetDeviceGroupPeerMemoryFeaturesKHR(device: VkDevice, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: *VkPeerMemoryFeatureFlags);
	void vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: uint32);
	void vkCmdDispatchBaseKHR(commandBuffer: VkCommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32);
	void vkTrimCommandPoolKHR(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags);
	VkResult vkEnumeratePhysicalDeviceGroupsKHR(instance: VkInstance, pPhysicalDeviceGroupCount: *uint32, pPhysicalDeviceGroupProperties: *VkPhysicalDeviceGroupProperties);
	void vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *VkExternalBufferProperties);
	VkResult vkGetMemoryFdKHR(device: VkDevice, pGetFdInfo: *VkMemoryGetFdInfoKHR, pFd: *int32);
	VkResult vkGetMemoryFdPropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: int32, pMemoryFdProperties: *VkMemoryFdPropertiesKHR);
	void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *VkExternalSemaphoreProperties);
	VkResult vkImportSemaphoreFdKHR(device: VkDevice, pImportSemaphoreFdInfo: *VkImportSemaphoreFdInfoKHR);
	VkResult vkGetSemaphoreFdKHR(device: VkDevice, pGetFdInfo: *VkSemaphoreGetFdInfoKHR, pFd: *int32);
	void vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: *VkWriteDescriptorSet);
	void vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: *void);
	VkResult vkCreateDescriptorUpdateTemplateKHR(device: VkDevice, pCreateInfo: *VkDescriptorUpdateTemplateCreateInfo, pAllocator: *VkAllocationCallbacks, pDescriptorUpdateTemplate: *VkDescriptorUpdateTemplate);
	void vkDestroyDescriptorUpdateTemplateKHR(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *VkAllocationCallbacks);
	void vkUpdateDescriptorSetWithTemplateKHR(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *void);
	VkResult vkCreateRenderPass2KHR(device: VkDevice, pCreateInfo: *VkRenderPassCreateInfo2, pAllocator: *VkAllocationCallbacks, pRenderPass: *VkRenderPass);
	void vkCmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer, pRenderPassBegin: *VkRenderPassBeginInfo, pSubpassBeginInfo: *VkSubpassBeginInfo);
	void vkCmdNextSubpass2KHR(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *VkSubpassBeginInfo, pSubpassEndInfo: *VkSubpassEndInfo);
	void vkCmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *VkSubpassEndInfo);
	VkResult vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR);
	void vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *VkExternalFenceProperties);
	VkResult vkImportFenceFdKHR(device: VkDevice, pImportFenceFdInfo: *VkImportFenceFdInfoKHR);
	VkResult vkGetFenceFdKHR(device: VkDevice, pGetFdInfo: *VkFenceGetFdInfoKHR, pFd: *int32);
	VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, pCounterCount: *uint32, pCounters: *VkPerformanceCounterKHR, pCounterDescriptions: *VkPerformanceCounterDescriptionKHR);
	void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: *VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: *uint32);
	VkResult vkAcquireProfilingLockKHR(device: VkDevice, pInfo: *VkAcquireProfilingLockInfoKHR);
	void vkReleaseProfilingLockKHR(device: VkDevice);
	VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: *VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: *VkSurfaceCapabilities2KHR);
	VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: *VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: *uint32, pSurfaceFormats: *VkSurfaceFormat2KHR);
	VkResult vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkDisplayProperties2KHR);
	VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkDisplayPlaneProperties2KHR);
	VkResult vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *uint32, pProperties: *VkDisplayModeProperties2KHR);
	VkResult vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: *VkDisplayPlaneInfo2KHR, pCapabilities: *VkDisplayPlaneCapabilities2KHR);
	void vkGetImageMemoryRequirements2KHR(device: VkDevice, pInfo: *VkImageMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetBufferMemoryRequirements2KHR(device: VkDevice, pInfo: *VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetImageSparseMemoryRequirements2KHR(device: VkDevice, pInfo: *VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *uint32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements2);
	VkResult vkCreateSamplerYcbcrConversionKHR(device: VkDevice, pCreateInfo: *VkSamplerYcbcrConversionCreateInfo, pAllocator: *VkAllocationCallbacks, pYcbcrConversion: *VkSamplerYcbcrConversion);
	void vkDestroySamplerYcbcrConversionKHR(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *VkAllocationCallbacks);
	VkResult vkBindBufferMemory2KHR(device: VkDevice, bindInfoCount: uint32, pBindInfos: *VkBindBufferMemoryInfo);
	VkResult vkBindImageMemory2KHR(device: VkDevice, bindInfoCount: uint32, pBindInfos: *VkBindImageMemoryInfo);
	void vkGetDescriptorSetLayoutSupportKHR(device: VkDevice, pCreateInfo: *VkDescriptorSetLayoutCreateInfo, pSupport: *VkDescriptorSetLayoutSupport);
	void vkCmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
	void vkCmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
	VkResult vkGetSemaphoreCounterValueKHR(device: VkDevice, semaphore: VkSemaphore, pValue: *uint64);
	VkResult vkWaitSemaphoresKHR(device: VkDevice, pWaitInfo: *VkSemaphoreWaitInfo, timeout: uint64);
	VkResult vkSignalSemaphoreKHR(device: VkDevice, pSignalInfo: *VkSemaphoreSignalInfo);
	VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: *uint32, pFragmentShadingRates: *VkPhysicalDeviceFragmentShadingRateKHR);
	void vkCmdSetFragmentShadingRateKHR(commandBuffer: VkCommandBuffer, pFragmentSize: *VkExtent2D, combinerOps: :array);
	void vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer: VkCommandBuffer, pLocationInfo: *VkRenderingAttachmentLocationInfo);
	void vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer: VkCommandBuffer, pInputAttachmentIndexInfo: *VkRenderingInputAttachmentIndexInfo);
	VkResult vkWaitForPresentKHR(device: VkDevice, swapchain: VkSwapchainKHR, presentId: uint64, timeout: uint64);
	VkDeviceAddress vkGetBufferDeviceAddressKHR(device: VkDevice, pInfo: *VkBufferDeviceAddressInfo);
	uint64 vkGetBufferOpaqueCaptureAddressKHR(device: VkDevice, pInfo: *VkBufferDeviceAddressInfo);
	uint64 vkGetDeviceMemoryOpaqueCaptureAddressKHR(device: VkDevice, pInfo: *VkDeviceMemoryOpaqueCaptureAddressInfo);
	VkResult vkCreateDeferredOperationKHR(device: VkDevice, pAllocator: *VkAllocationCallbacks, pDeferredOperation: *VkDeferredOperationKHR);
	void vkDestroyDeferredOperationKHR(device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: *VkAllocationCallbacks);
	uint32 vkGetDeferredOperationMaxConcurrencyKHR(device: VkDevice, operation: VkDeferredOperationKHR);
	VkResult vkGetDeferredOperationResultKHR(device: VkDevice, operation: VkDeferredOperationKHR);
	VkResult vkDeferredOperationJoinKHR(device: VkDevice, operation: VkDeferredOperationKHR);
	VkResult vkGetPipelineExecutablePropertiesKHR(device: VkDevice, pPipelineInfo: *VkPipelineInfoKHR, pExecutableCount: *uint32, pProperties: *VkPipelineExecutablePropertiesKHR);
	VkResult vkGetPipelineExecutableStatisticsKHR(device: VkDevice, pExecutableInfo: *VkPipelineExecutableInfoKHR, pStatisticCount: *uint32, pStatistics: *VkPipelineExecutableStatisticKHR);
	VkResult vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice, pExecutableInfo: *VkPipelineExecutableInfoKHR, pInternalRepresentationCount: *uint32, pInternalRepresentations: *VkPipelineExecutableInternalRepresentationKHR);
	VkResult vkMapMemory2KHR(device: VkDevice, pMemoryMapInfo: *VkMemoryMapInfo, ppData: **void);
	VkResult vkUnmapMemory2KHR(device: VkDevice, pMemoryUnmapInfo: *VkMemoryUnmapInfo);
	VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice: VkPhysicalDevice, pQualityLevelInfo: *VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, pQualityLevelProperties: *VkVideoEncodeQualityLevelPropertiesKHR);
	VkResult vkGetEncodedVideoSessionParametersKHR(device: VkDevice, pVideoSessionParametersInfo: *VkVideoEncodeSessionParametersGetInfoKHR, pFeedbackInfo: *VkVideoEncodeSessionParametersFeedbackInfoKHR, pDataSize: *size_t, pData: *void);
	void vkCmdEncodeVideoKHR(commandBuffer: VkCommandBuffer, pEncodeInfo: *VkVideoEncodeInfoKHR);
	void vkCmdSetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: *VkDependencyInfo);
	void vkCmdResetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2);
	void vkCmdWaitEvents2KHR(commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: *VkEvent, pDependencyInfos: *VkDependencyInfo);
	void vkCmdPipelineBarrier2KHR(commandBuffer: VkCommandBuffer, pDependencyInfo: *VkDependencyInfo);
	void vkCmdWriteTimestamp2KHR(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: uint32);
	VkResult vkQueueSubmit2KHR(queue: VkQueue, submitCount: uint32, pSubmits: *VkSubmitInfo2, fence: VkFence);
	void vkCmdCopyBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyBufferInfo: *VkCopyBufferInfo2);
	void vkCmdCopyImage2KHR(commandBuffer: VkCommandBuffer, pCopyImageInfo: *VkCopyImageInfo2);
	void vkCmdCopyBufferToImage2KHR(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: *VkCopyBufferToImageInfo2);
	void vkCmdCopyImageToBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: *VkCopyImageToBufferInfo2);
	void vkCmdBlitImage2KHR(commandBuffer: VkCommandBuffer, pBlitImageInfo: *VkBlitImageInfo2);
	void vkCmdResolveImage2KHR(commandBuffer: VkCommandBuffer, pResolveImageInfo: *VkResolveImageInfo2);
	void vkCmdTraceRaysIndirect2KHR(commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress);
	void vkGetDeviceBufferMemoryRequirementsKHR(device: VkDevice, pInfo: *VkDeviceBufferMemoryRequirements, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetDeviceImageMemoryRequirementsKHR(device: VkDevice, pInfo: *VkDeviceImageMemoryRequirements, pMemoryRequirements: *VkMemoryRequirements2);
	void vkGetDeviceImageSparseMemoryRequirementsKHR(device: VkDevice, pInfo: *VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: *uint32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements2);
	void vkCmdBindIndexBuffer2KHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, indexType: VkIndexType);
	void vkGetRenderingAreaGranularityKHR(device: VkDevice, pRenderingAreaInfo: *VkRenderingAreaInfo, pGranularity: *VkExtent2D);
	void vkGetDeviceImageSubresourceLayoutKHR(device: VkDevice, pInfo: *VkDeviceImageSubresourceInfo, pLayout: *VkSubresourceLayout2);
	void vkGetImageSubresourceLayout2KHR(device: VkDevice, image: VkImage, pSubresource: *VkImageSubresource2, pLayout: *VkSubresourceLayout2);
	VkResult vkCreatePipelineBinariesKHR(device: VkDevice, pCreateInfo: *VkPipelineBinaryCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pBinaries: *VkPipelineBinaryHandlesInfoKHR);
	void vkDestroyPipelineBinaryKHR(device: VkDevice, pipelineBinary: VkPipelineBinaryKHR, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetPipelineKeyKHR(device: VkDevice, pPipelineCreateInfo: *VkPipelineCreateInfoKHR, pPipelineKey: *VkPipelineBinaryKeyKHR);
	VkResult vkGetPipelineBinaryDataKHR(device: VkDevice, pInfo: *VkPipelineBinaryDataInfoKHR, pPipelineBinaryKey: *VkPipelineBinaryKeyKHR, pPipelineBinaryDataSize: *size_t, pPipelineBinaryData: *void);
	VkResult vkReleaseCapturedPipelineDataKHR(device: VkDevice, pInfo: *VkReleaseCapturedPipelineDataInfoKHR, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkCooperativeMatrixPropertiesKHR);
	void vkCmdSetLineStippleKHR(commandBuffer: VkCommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16_t);
	VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice: VkPhysicalDevice, pTimeDomainCount: *uint32, pTimeDomains: *VkTimeDomainKHR);
	VkResult vkGetCalibratedTimestampsKHR(device: VkDevice, timestampCount: uint32, pTimestampInfos: *VkCalibratedTimestampInfoKHR, pTimestamps: *uint64, pMaxDeviation: *uint64);
	void vkCmdBindDescriptorSets2KHR(commandBuffer: VkCommandBuffer, pBindDescriptorSetsInfo: *VkBindDescriptorSetsInfo);
	void vkCmdPushConstants2KHR(commandBuffer: VkCommandBuffer, pPushConstantsInfo: *VkPushConstantsInfo);
	void vkCmdPushDescriptorSet2KHR(commandBuffer: VkCommandBuffer, pPushDescriptorSetInfo: *VkPushDescriptorSetInfo);
	void vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer: VkCommandBuffer, pPushDescriptorSetWithTemplateInfo: *VkPushDescriptorSetWithTemplateInfo);
	void vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer: VkCommandBuffer, pSetDescriptorBufferOffsetsInfo: *VkSetDescriptorBufferOffsetsInfoEXT);
	void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer: VkCommandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo: *VkBindDescriptorBufferEmbeddedSamplersInfoEXT);
	VkResult vkCreateDebugReportCallbackEXT(instance: VkInstance, pCreateInfo: *VkDebugReportCallbackCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pCallback: *VkDebugReportCallbackEXT);
	void vkDestroyDebugReportCallbackEXT(instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: *VkAllocationCallbacks);
	void vkDebugReportMessageEXT(instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: uint64, location: size_t, messageCode: int32_t, pLayerPrefix: *byte, pMessage: *byte);
	VkResult vkDebugMarkerSetObjectTagEXT(device: VkDevice, pTagInfo: *VkDebugMarkerObjectTagInfoEXT);
	VkResult vkDebugMarkerSetObjectNameEXT(device: VkDevice, pNameInfo: *VkDebugMarkerObjectNameInfoEXT);
	void vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: *VkDebugMarkerMarkerInfoEXT);
	void vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer);
	void vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: *VkDebugMarkerMarkerInfoEXT);
	void vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: *VkBuffer, pOffsets: *VkDeviceSize, pSizes: *VkDeviceSize);
	void vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: *VkBuffer, pCounterBufferOffsets: *VkDeviceSize);
	void vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: *VkBuffer, pCounterBufferOffsets: *VkDeviceSize);
	void vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags, index: uint32);
	void vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, index: uint32);
	void vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer, instanceCount: uint32, firstInstance: uint32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: uint32, vertexStride: uint32);
	VkResult vkCreateCuModuleNVX(device: VkDevice, pCreateInfo: *VkCuModuleCreateInfoNVX, pAllocator: *VkAllocationCallbacks, pModule: *VkCuModuleNVX);
	VkResult vkCreateCuFunctionNVX(device: VkDevice, pCreateInfo: *VkCuFunctionCreateInfoNVX, pAllocator: *VkAllocationCallbacks, pFunction: *VkCuFunctionNVX);
	void vkDestroyCuModuleNVX(device: VkDevice, module: VkCuModuleNVX, pAllocator: *VkAllocationCallbacks);
	void vkDestroyCuFunctionNVX(device: VkDevice, function: VkCuFunctionNVX, pAllocator: *VkAllocationCallbacks);
	void vkCmdCuLaunchKernelNVX(commandBuffer: VkCommandBuffer, pLaunchInfo: *VkCuLaunchInfoNVX);
	uint32 vkGetImageViewHandleNVX(device: VkDevice, pInfo: *VkImageViewHandleInfoNVX);
	uint64 vkGetImageViewHandle64NVX(device: VkDevice, pInfo: *VkImageViewHandleInfoNVX);
	VkResult vkGetImageViewAddressNVX(device: VkDevice, imageView: VkImageView, pProperties: *VkImageViewAddressPropertiesNVX);
	void vkCmdDrawIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
	void vkCmdDrawIndexedIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
	VkResult vkGetShaderInfoAMD(device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: *size_t, pInfo: *void);
	VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: *VkExternalImageFormatPropertiesNV);
	void vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: *VkConditionalRenderingBeginInfoEXT);
	void vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer);
	void vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportWScalings: *VkViewportWScalingNV);
	VkResult vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR);
	VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *VkSurfaceCapabilities2EXT);
	VkResult vkDisplayPowerControlEXT(device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: *VkDisplayPowerInfoEXT);
	VkResult vkRegisterDeviceEventEXT(device: VkDevice, pDeviceEventInfo: *VkDeviceEventInfoEXT, pAllocator: *VkAllocationCallbacks, pFence: *VkFence);
	VkResult vkRegisterDisplayEventEXT(device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: *VkDisplayEventInfoEXT, pAllocator: *VkAllocationCallbacks, pFence: *VkFence);
	VkResult vkGetSwapchainCounterEXT(device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: *uint64);
	VkResult vkGetRefreshCycleDurationGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: *VkRefreshCycleDurationGOOGLE);
	VkResult vkGetPastPresentationTimingGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: *uint32, pPresentationTimings: *VkPastPresentationTimingGOOGLE);
	void vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer, firstDiscardRectangle: uint32, discardRectangleCount: uint32, pDiscardRectangles: *VkRect2D);
	void vkCmdSetDiscardRectangleEnableEXT(commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32);
	void vkCmdSetDiscardRectangleModeEXT(commandBuffer: VkCommandBuffer, discardRectangleMode: VkDiscardRectangleModeEXT);
	void vkSetHdrMetadataEXT(device: VkDevice, swapchainCount: uint32, pSwapchains: *VkSwapchainKHR, pMetadata: *VkHdrMetadataEXT);
	VkResult vkSetDebugUtilsObjectNameEXT(device: VkDevice, pNameInfo: *VkDebugUtilsObjectNameInfoEXT);
	VkResult vkSetDebugUtilsObjectTagEXT(device: VkDevice, pTagInfo: *VkDebugUtilsObjectTagInfoEXT);
	void vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *VkDebugUtilsLabelEXT);
	void vkQueueEndDebugUtilsLabelEXT(queue: VkQueue);
	void vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *VkDebugUtilsLabelEXT);
	void vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: *VkDebugUtilsLabelEXT);
	void vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer);
	void vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: *VkDebugUtilsLabelEXT);
	VkResult vkCreateDebugUtilsMessengerEXT(instance: VkInstance, pCreateInfo: *VkDebugUtilsMessengerCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pMessenger: *VkDebugUtilsMessengerEXT);
	void vkDestroyDebugUtilsMessengerEXT(instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: *VkAllocationCallbacks);
	void vkSubmitDebugUtilsMessageEXT(instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: *VkDebugUtilsMessengerCallbackDataEXT);
	void vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer, pSampleLocationsInfo: *VkSampleLocationsInfoEXT);
	void vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: *VkMultisamplePropertiesEXT);
	VkResult vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice, image: VkImage, pProperties: *VkImageDrmFormatModifierPropertiesEXT);
	VkResult vkCreateValidationCacheEXT(device: VkDevice, pCreateInfo: *VkValidationCacheCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pValidationCache: *VkValidationCacheEXT);
	void vkDestroyValidationCacheEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: *VkAllocationCallbacks);
	VkResult vkMergeValidationCachesEXT(device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: uint32, pSrcCaches: *VkValidationCacheEXT);
	VkResult vkGetValidationCacheDataEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: *size_t, pData: *void);
	void vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout);
	void vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pShadingRatePalettes: *VkShadingRatePaletteNV);
	void vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: *VkCoarseSampleOrderCustomNV);
	VkResult vkCreateAccelerationStructureNV(device: VkDevice, pCreateInfo: *VkAccelerationStructureCreateInfoNV, pAllocator: *VkAllocationCallbacks, pAccelerationStructure: *VkAccelerationStructureNV);
	void vkDestroyAccelerationStructureNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: *VkAllocationCallbacks);
	void vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice, pInfo: *VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: *VkMemoryRequirements2KHR);
	VkResult vkBindAccelerationStructureMemoryNV(device: VkDevice, bindInfoCount: uint32, pBindInfos: *VkBindAccelerationStructureMemoryInfoNV);
	void vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer, pInfo: *VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize);
	void vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR);
	void vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: uint32, height: uint32, depth: uint32);
	VkResult vkCreateRayTracingPipelinesNV(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: *VkRayTracingPipelineCreateInfoNV, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline);
	VkResult vkGetRayTracingShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: size_t, pData: *void);
	VkResult vkGetRayTracingShaderGroupHandlesNV(device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: size_t, pData: *void);
	VkResult vkGetAccelerationStructureHandleNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: size_t, pData: *void);
	void vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: *VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32);
	VkResult vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: uint32);
	VkResult vkGetMemoryHostPointerPropertiesEXT(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: *void, pMemoryHostPointerProperties: *VkMemoryHostPointerPropertiesEXT);
	void vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32);
	void vkCmdWriteBufferMarker2AMD(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32);
	VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice, pTimeDomainCount: *uint32, pTimeDomains: *VkTimeDomainKHR);
	VkResult vkGetCalibratedTimestampsEXT(device: VkDevice, timestampCount: uint32, pTimestampInfos: *VkCalibratedTimestampInfoKHR, pTimestamps: *uint64, pMaxDeviation: *uint64);
	void vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: uint32, firstTask: uint32);
	void vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32);
	void vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
	void vkCmdSetExclusiveScissorEnableNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissorEnables: *VkBool32);
	void vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissors: *VkRect2D);
	void vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer, pCheckpointMarker: *void);
	void vkGetQueueCheckpointDataNV(queue: VkQueue, pCheckpointDataCount: *uint32, pCheckpointData: *VkCheckpointDataNV);
	void vkGetQueueCheckpointData2NV(queue: VkQueue, pCheckpointDataCount: *uint32, pCheckpointData: *VkCheckpointData2NV);
	VkResult vkInitializePerformanceApiINTEL(device: VkDevice, pInitializeInfo: *VkInitializePerformanceApiInfoINTEL);
	void vkUninitializePerformanceApiINTEL(device: VkDevice);
	VkResult vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: *VkPerformanceMarkerInfoINTEL);
	VkResult vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: *VkPerformanceStreamMarkerInfoINTEL);
	VkResult vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer, pOverrideInfo: *VkPerformanceOverrideInfoINTEL);
	VkResult vkAcquirePerformanceConfigurationINTEL(device: VkDevice, pAcquireInfo: *VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: *VkPerformanceConfigurationINTEL);
	VkResult vkReleasePerformanceConfigurationINTEL(device: VkDevice, configuration: VkPerformanceConfigurationINTEL);
	VkResult vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue, configuration: VkPerformanceConfigurationINTEL);
	VkResult vkGetPerformanceParameterINTEL(device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: *VkPerformanceValueINTEL);
	void vkSetLocalDimmingAMD(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32);
	VkDeviceAddress vkGetBufferDeviceAddressEXT(device: VkDevice, pInfo: *VkBufferDeviceAddressInfo);
	VkResult vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice: VkPhysicalDevice, pToolCount: *uint32, pToolProperties: *VkPhysicalDeviceToolProperties);
	VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkCooperativeMatrixPropertiesNV);
	VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice, pCombinationCount: *uint32, pCombinations: *VkFramebufferMixedSamplesCombinationNV);
	VkResult vkCreateHeadlessSurfaceEXT(instance: VkInstance, pCreateInfo: *VkHeadlessSurfaceCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pSurface: *VkSurfaceKHR);
	void vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16_t);
	void vkResetQueryPoolEXT(device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32);
	void vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
	void vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
	void vkCmdSetPrimitiveTopologyEXT(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology);
	void vkCmdSetViewportWithCountEXT(commandBuffer: VkCommandBuffer, viewportCount: uint32, pViewports: *VkViewport);
	void vkCmdSetScissorWithCountEXT(commandBuffer: VkCommandBuffer, scissorCount: uint32, pScissors: *VkRect2D);
	void vkCmdBindVertexBuffers2EXT(commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: *VkBuffer, pOffsets: *VkDeviceSize, pSizes: *VkDeviceSize, pStrides: *VkDeviceSize);
	void vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
	void vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
	void vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
	void vkCmdSetDepthBoundsTestEnableEXT(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32);
	void vkCmdSetStencilTestEnableEXT(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32);
	void vkCmdSetStencilOpEXT(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp);
	VkResult vkCopyMemoryToImageEXT(device: VkDevice, pCopyMemoryToImageInfo: *VkCopyMemoryToImageInfo);
	VkResult vkCopyImageToMemoryEXT(device: VkDevice, pCopyImageToMemoryInfo: *VkCopyImageToMemoryInfo);
	VkResult vkCopyImageToImageEXT(device: VkDevice, pCopyImageToImageInfo: *VkCopyImageToImageInfo);
	VkResult vkTransitionImageLayoutEXT(device: VkDevice, transitionCount: uint32, pTransitions: *VkHostImageLayoutTransitionInfo);
	void vkGetImageSubresourceLayout2EXT(device: VkDevice, image: VkImage, pSubresource: *VkImageSubresource2, pLayout: *VkSubresourceLayout2);
	VkResult vkReleaseSwapchainImagesEXT(device: VkDevice, pReleaseInfo: *VkReleaseSwapchainImagesInfoEXT);
	void vkGetGeneratedCommandsMemoryRequirementsNV(device: VkDevice, pInfo: *VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: *VkMemoryRequirements2);
	void vkCmdPreprocessGeneratedCommandsNV(commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: *VkGeneratedCommandsInfoNV);
	void vkCmdExecuteGeneratedCommandsNV(commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: *VkGeneratedCommandsInfoNV);
	void vkCmdBindPipelineShaderGroupNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: uint32);
	VkResult vkCreateIndirectCommandsLayoutNV(device: VkDevice, pCreateInfo: *VkIndirectCommandsLayoutCreateInfoNV, pAllocator: *VkAllocationCallbacks, pIndirectCommandsLayout: *VkIndirectCommandsLayoutNV);
	void vkDestroyIndirectCommandsLayoutNV(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: *VkAllocationCallbacks);
	void vkCmdSetDepthBias2EXT(commandBuffer: VkCommandBuffer, pDepthBiasInfo: *VkDepthBiasInfoEXT);
	VkResult vkAcquireDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: int32_t, display: VkDisplayKHR);
	VkResult vkGetDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: int32_t, connectorId: uint32, display: *VkDisplayKHR);
	VkResult vkCreatePrivateDataSlotEXT(device: VkDevice, pCreateInfo: *VkPrivateDataSlotCreateInfo, pAllocator: *VkAllocationCallbacks, pPrivateDataSlot: *VkPrivateDataSlot);
	void vkDestroyPrivateDataSlotEXT(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: *VkAllocationCallbacks);
	VkResult vkSetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, data: uint64);
	void vkGetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, pData: *uint64);
	VkResult vkCreateCudaModuleNV(device: VkDevice, pCreateInfo: *VkCudaModuleCreateInfoNV, pAllocator: *VkAllocationCallbacks, pModule: *VkCudaModuleNV);
	VkResult vkGetCudaModuleCacheNV(device: VkDevice, module: VkCudaModuleNV, pCacheSize: *size_t, pCacheData: *void);
	VkResult vkCreateCudaFunctionNV(device: VkDevice, pCreateInfo: *VkCudaFunctionCreateInfoNV, pAllocator: *VkAllocationCallbacks, pFunction: *VkCudaFunctionNV);
	void vkDestroyCudaModuleNV(device: VkDevice, module: VkCudaModuleNV, pAllocator: *VkAllocationCallbacks);
	void vkDestroyCudaFunctionNV(device: VkDevice, function: VkCudaFunctionNV, pAllocator: *VkAllocationCallbacks);
	void vkCmdCudaLaunchKernelNV(commandBuffer: VkCommandBuffer, pLaunchInfo: *VkCudaLaunchInfoNV);
	void vkGetDescriptorSetLayoutSizeEXT(device: VkDevice, layout: VkDescriptorSetLayout, pLayoutSizeInBytes: *VkDeviceSize);
	void vkGetDescriptorSetLayoutBindingOffsetEXT(device: VkDevice, layout: VkDescriptorSetLayout, binding: uint32, pOffset: *VkDeviceSize);
	void vkGetDescriptorEXT(device: VkDevice, pDescriptorInfo: *VkDescriptorGetInfoEXT, dataSize: size_t, pDescriptor: *void);
	void vkCmdBindDescriptorBuffersEXT(commandBuffer: VkCommandBuffer, bufferCount: uint32, pBindingInfos: *VkDescriptorBufferBindingInfoEXT);
	void vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, setCount: uint32, pBufferIndices: *uint32, pOffsets: *VkDeviceSize);
	void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32);
	VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: *VkBufferCaptureDescriptorDataInfoEXT, pData: *void);
	VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: *VkImageCaptureDescriptorDataInfoEXT, pData: *void);
	VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: *VkImageViewCaptureDescriptorDataInfoEXT, pData: *void);
	VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: *VkSamplerCaptureDescriptorDataInfoEXT, pData: *void);
	VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: *VkAccelerationStructureCaptureDescriptorDataInfoEXT, pData: *void);
	void vkCmdSetFragmentShadingRateEnumNV(commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: :array);
	VkResult vkGetDeviceFaultInfoEXT(device: VkDevice, pFaultCounts: *VkDeviceFaultCountsEXT, pFaultInfo: *VkDeviceFaultInfoEXT);
	void vkCmdSetVertexInputEXT(commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: uint32, pVertexBindingDescriptions: *VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: uint32, pVertexAttributeDescriptions: *VkVertexInputAttributeDescription2EXT);
	VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: *VkExtent2D);
	void vkCmdSubpassShadingHUAWEI(commandBuffer: VkCommandBuffer);
	void vkCmdBindInvocationMaskHUAWEI(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout);
	VkResult vkGetMemoryRemoteAddressNV(device: VkDevice, pMemoryGetRemoteAddressInfo: *VkMemoryGetRemoteAddressInfoNV, pAddress: *VkRemoteAddressNV);
	VkResult vkGetPipelinePropertiesEXT(device: VkDevice, pPipelineInfo: *VkPipelineInfoEXT, pPipelineProperties: *VkBaseOutStructure);
	void vkCmdSetPatchControlPointsEXT(commandBuffer: VkCommandBuffer, patchControlPoints: uint32);
	void vkCmdSetRasterizerDiscardEnableEXT(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32);
	void vkCmdSetDepthBiasEnableEXT(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32);
	void vkCmdSetLogicOpEXT(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp);
	void vkCmdSetPrimitiveRestartEnableEXT(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32);
	void vkCmdSetColorWriteEnableEXT(commandBuffer: VkCommandBuffer, attachmentCount: uint32, pColorWriteEnables: *VkBool32);
	void vkCmdDrawMultiEXT(commandBuffer: VkCommandBuffer, drawCount: uint32, pVertexInfo: *VkMultiDrawInfoEXT, instanceCount: uint32, firstInstance: uint32, stride: uint32);
	void vkCmdDrawMultiIndexedEXT(commandBuffer: VkCommandBuffer, drawCount: uint32, pIndexInfo: *VkMultiDrawIndexedInfoEXT, instanceCount: uint32, firstInstance: uint32, stride: uint32, pVertexOffset: *int32_t);
	VkResult vkCreateMicromapEXT(device: VkDevice, pCreateInfo: *VkMicromapCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pMicromap: *VkMicromapEXT);
	void vkDestroyMicromapEXT(device: VkDevice, micromap: VkMicromapEXT, pAllocator: *VkAllocationCallbacks);
	void vkCmdBuildMicromapsEXT(commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: *VkMicromapBuildInfoEXT);
	VkResult vkBuildMicromapsEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: uint32, pInfos: *VkMicromapBuildInfoEXT);
	VkResult vkCopyMicromapEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyMicromapInfoEXT);
	VkResult vkCopyMicromapToMemoryEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyMicromapToMemoryInfoEXT);
	VkResult vkCopyMemoryToMicromapEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyMemoryToMicromapInfoEXT);
	VkResult vkWriteMicromapsPropertiesEXT(device: VkDevice, micromapCount: uint32, pMicromaps: *VkMicromapEXT, queryType: VkQueryType, dataSize: size_t, pData: *void, stride: size_t);
	void vkCmdCopyMicromapEXT(commandBuffer: VkCommandBuffer, pInfo: *VkCopyMicromapInfoEXT);
	void vkCmdCopyMicromapToMemoryEXT(commandBuffer: VkCommandBuffer, pInfo: *VkCopyMicromapToMemoryInfoEXT);
	void vkCmdCopyMemoryToMicromapEXT(commandBuffer: VkCommandBuffer, pInfo: *VkCopyMemoryToMicromapInfoEXT);
	void vkCmdWriteMicromapsPropertiesEXT(commandBuffer: VkCommandBuffer, micromapCount: uint32, pMicromaps: *VkMicromapEXT, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32);
	void vkGetDeviceMicromapCompatibilityEXT(device: VkDevice, pVersionInfo: *VkMicromapVersionInfoEXT, pCompatibility: *VkAccelerationStructureCompatibilityKHR);
	void vkGetMicromapBuildSizesEXT(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: *VkMicromapBuildInfoEXT, pSizeInfo: *VkMicromapBuildSizesInfoEXT);
	void vkCmdDrawClusterHUAWEI(commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32);
	void vkCmdDrawClusterIndirectHUAWEI(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize);
	void vkSetDeviceMemoryPriorityEXT(device: VkDevice, memory: VkDeviceMemory, priority: :float);
	void vkGetDescriptorSetLayoutHostMappingInfoVALVE(device: VkDevice, pBindingReference: *VkDescriptorSetBindingReferenceVALVE, pHostMapping: *VkDescriptorSetLayoutHostMappingInfoVALVE);
	void vkGetDescriptorSetHostMappingVALVE(device: VkDevice, descriptorSet: VkDescriptorSet, ppData: **void);
	void vkCmdCopyMemoryIndirectNV(commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: uint32, stride: uint32);
	void vkCmdCopyMemoryToImageIndirectNV(commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: uint32, stride: uint32, dstImage: VkImage, dstImageLayout: VkImageLayout, pImageSubresources: *VkImageSubresourceLayers);
	void vkCmdDecompressMemoryNV(commandBuffer: VkCommandBuffer, decompressRegionCount: uint32, pDecompressMemoryRegions: *VkDecompressMemoryRegionNV);
	void vkCmdDecompressMemoryIndirectCountNV(commandBuffer: VkCommandBuffer, indirectCommandsAddress: VkDeviceAddress, indirectCommandsCountAddress: VkDeviceAddress, stride: uint32);
	void vkGetPipelineIndirectMemoryRequirementsNV(device: VkDevice, pCreateInfo: *VkComputePipelineCreateInfo, pMemoryRequirements: *VkMemoryRequirements2);
	void vkCmdUpdatePipelineIndirectBufferNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline);
	VkDeviceAddress vkGetPipelineIndirectDeviceAddressNV(device: VkDevice, pInfo: *VkPipelineIndirectDeviceAddressInfoNV);
	void vkCmdSetDepthClampEnableEXT(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32);
	void vkCmdSetPolygonModeEXT(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode);
	void vkCmdSetRasterizationSamplesEXT(commandBuffer: VkCommandBuffer, rasterizationSamples: VkSampleCountFlagBits);
	void vkCmdSetSampleMaskEXT(commandBuffer: VkCommandBuffer, samples: VkSampleCountFlagBits, pSampleMask: *VkSampleMask);
	void vkCmdSetAlphaToCoverageEnableEXT(commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32);
	void vkCmdSetAlphaToOneEnableEXT(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32);
	void vkCmdSetLogicOpEnableEXT(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32);
	void vkCmdSetColorBlendEnableEXT(commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEnables: *VkBool32);
	void vkCmdSetColorBlendEquationEXT(commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEquations: *VkColorBlendEquationEXT);
	void vkCmdSetColorWriteMaskEXT(commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorWriteMasks: *VkColorComponentFlags);
	void vkCmdSetTessellationDomainOriginEXT(commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin);
	void vkCmdSetRasterizationStreamEXT(commandBuffer: VkCommandBuffer, rasterizationStream: uint32);
	void vkCmdSetConservativeRasterizationModeEXT(commandBuffer: VkCommandBuffer, conservativeRasterizationMode: VkConservativeRasterizationModeEXT);
	void vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: :float);
	void vkCmdSetDepthClipEnableEXT(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32);
	void vkCmdSetSampleLocationsEnableEXT(commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32);
	void vkCmdSetColorBlendAdvancedEXT(commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendAdvanced: *VkColorBlendAdvancedEXT);
	void vkCmdSetProvokingVertexModeEXT(commandBuffer: VkCommandBuffer, provokingVertexMode: VkProvokingVertexModeEXT);
	void vkCmdSetLineRasterizationModeEXT(commandBuffer: VkCommandBuffer, lineRasterizationMode: VkLineRasterizationModeEXT);
	void vkCmdSetLineStippleEnableEXT(commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32);
	void vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32);
	void vkCmdSetViewportWScalingEnableNV(commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32);
	void vkCmdSetViewportSwizzleNV(commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportSwizzles: *VkViewportSwizzleNV);
	void vkCmdSetCoverageToColorEnableNV(commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32);
	void vkCmdSetCoverageToColorLocationNV(commandBuffer: VkCommandBuffer, coverageToColorLocation: uint32);
	void vkCmdSetCoverageModulationModeNV(commandBuffer: VkCommandBuffer, coverageModulationMode: VkCoverageModulationModeNV);
	void vkCmdSetCoverageModulationTableEnableNV(commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32);
	void vkCmdSetCoverageModulationTableNV(commandBuffer: VkCommandBuffer, coverageModulationTableCount: uint32, pCoverageModulationTable: *:float);
	void vkCmdSetShadingRateImageEnableNV(commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32);
	void vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer: VkCommandBuffer, representativeFragmentTestEnable: VkBool32);
	void vkCmdSetCoverageReductionModeNV(commandBuffer: VkCommandBuffer, coverageReductionMode: VkCoverageReductionModeNV);
	void vkGetShaderModuleIdentifierEXT(device: VkDevice, shaderModule: VkShaderModule, pIdentifier: *VkShaderModuleIdentifierEXT);
	void vkGetShaderModuleCreateInfoIdentifierEXT(device: VkDevice, pCreateInfo: *VkShaderModuleCreateInfo, pIdentifier: *VkShaderModuleIdentifierEXT);
	VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice: VkPhysicalDevice, pOpticalFlowImageFormatInfo: *VkOpticalFlowImageFormatInfoNV, pFormatCount: *uint32, pImageFormatProperties: *VkOpticalFlowImageFormatPropertiesNV);
	VkResult vkCreateOpticalFlowSessionNV(device: VkDevice, pCreateInfo: *VkOpticalFlowSessionCreateInfoNV, pAllocator: *VkAllocationCallbacks, pSession: *VkOpticalFlowSessionNV);
	void vkDestroyOpticalFlowSessionNV(device: VkDevice, session: VkOpticalFlowSessionNV, pAllocator: *VkAllocationCallbacks);
	VkResult vkBindOpticalFlowSessionImageNV(device: VkDevice, session: VkOpticalFlowSessionNV, bindingPoint: VkOpticalFlowSessionBindingPointNV, view: VkImageView, layout: VkImageLayout);
	void vkCmdOpticalFlowExecuteNV(commandBuffer: VkCommandBuffer, session: VkOpticalFlowSessionNV, pExecuteInfo: *VkOpticalFlowExecuteInfoNV);
	void vkAntiLagUpdateAMD(device: VkDevice, pData: *VkAntiLagDataAMD);
	VkResult vkCreateShadersEXT(device: VkDevice, createInfoCount: uint32, pCreateInfos: *VkShaderCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pShaders: *VkShaderEXT);
	void vkDestroyShaderEXT(device: VkDevice, shader: VkShaderEXT, pAllocator: *VkAllocationCallbacks);
	VkResult vkGetShaderBinaryDataEXT(device: VkDevice, shader: VkShaderEXT, pDataSize: *size_t, pData: *void);
	void vkCmdBindShadersEXT(commandBuffer: VkCommandBuffer, stageCount: uint32, pStages: *VkShaderStageFlagBits, pShaders: *VkShaderEXT);
	void vkCmdSetDepthClampRangeEXT(commandBuffer: VkCommandBuffer, depthClampMode: VkDepthClampModeEXT, pDepthClampRange: *VkDepthClampRangeEXT);
	VkResult vkGetFramebufferTilePropertiesQCOM(device: VkDevice, framebuffer: VkFramebuffer, pPropertiesCount: *uint32, pProperties: *VkTilePropertiesQCOM);
	VkResult vkGetDynamicRenderingTilePropertiesQCOM(device: VkDevice, pRenderingInfo: *VkRenderingInfo, pProperties: *VkTilePropertiesQCOM);
	VkResult vkGetPhysicalDeviceCooperativeVectorPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkCooperativeVectorPropertiesNV);
	VkResult vkConvertCooperativeVectorMatrixNV(device: VkDevice, pInfo: *VkConvertCooperativeVectorMatrixInfoNV);
	void vkCmdConvertCooperativeVectorMatrixNV(commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: *VkConvertCooperativeVectorMatrixInfoNV);
	VkResult vkSetLatencySleepModeNV(device: VkDevice, swapchain: VkSwapchainKHR, pSleepModeInfo: *VkLatencySleepModeInfoNV);
	VkResult vkLatencySleepNV(device: VkDevice, swapchain: VkSwapchainKHR, pSleepInfo: *VkLatencySleepInfoNV);
	void vkSetLatencyMarkerNV(device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: *VkSetLatencyMarkerInfoNV);
	void vkGetLatencyTimingsNV(device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: *VkGetLatencyMarkerInfoNV);
	void vkQueueNotifyOutOfBandNV(queue: VkQueue, pQueueTypeInfo: *VkOutOfBandQueueTypeInfoNV);
	void vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer: VkCommandBuffer, aspectMask: VkImageAspectFlags);
	void vkGetClusterAccelerationStructureBuildSizesNV(device: VkDevice, pInfo: *VkClusterAccelerationStructureInputInfoNV, pSizeInfo: *VkAccelerationStructureBuildSizesInfoKHR);
	void vkCmdBuildClusterAccelerationStructureIndirectNV(commandBuffer: VkCommandBuffer, pCommandInfos: *VkClusterAccelerationStructureCommandsInfoNV);
	void vkGetPartitionedAccelerationStructuresBuildSizesNV(device: VkDevice, pInfo: *VkPartitionedAccelerationStructureInstancesInputNV, pSizeInfo: *VkAccelerationStructureBuildSizesInfoKHR);
	void vkCmdBuildPartitionedAccelerationStructuresNV(commandBuffer: VkCommandBuffer, pBuildInfo: *VkBuildPartitionedAccelerationStructureInfoNV);
	void vkGetGeneratedCommandsMemoryRequirementsEXT(device: VkDevice, pInfo: *VkGeneratedCommandsMemoryRequirementsInfoEXT, pMemoryRequirements: *VkMemoryRequirements2);
	void vkCmdPreprocessGeneratedCommandsEXT(commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: *VkGeneratedCommandsInfoEXT, stateCommandBuffer: VkCommandBuffer);
	void vkCmdExecuteGeneratedCommandsEXT(commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: *VkGeneratedCommandsInfoEXT);
	VkResult vkCreateIndirectCommandsLayoutEXT(device: VkDevice, pCreateInfo: *VkIndirectCommandsLayoutCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pIndirectCommandsLayout: *VkIndirectCommandsLayoutEXT);
	void vkDestroyIndirectCommandsLayoutEXT(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutEXT, pAllocator: *VkAllocationCallbacks);
	VkResult vkCreateIndirectExecutionSetEXT(device: VkDevice, pCreateInfo: *VkIndirectExecutionSetCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pIndirectExecutionSet: *VkIndirectExecutionSetEXT);
	void vkDestroyIndirectExecutionSetEXT(device: VkDevice, indirectExecutionSet: VkIndirectExecutionSetEXT, pAllocator: *VkAllocationCallbacks);
	void vkUpdateIndirectExecutionSetPipelineEXT(device: VkDevice, indirectExecutionSet: VkIndirectExecutionSetEXT, executionSetWriteCount: uint32, pExecutionSetWrites: *VkWriteIndirectExecutionSetPipelineEXT);
	void vkUpdateIndirectExecutionSetShaderEXT(device: VkDevice, indirectExecutionSet: VkIndirectExecutionSetEXT, executionSetWriteCount: uint32, pExecutionSetWrites: *VkWriteIndirectExecutionSetShaderEXT);
	VkResult vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: *uint32, pProperties: *VkCooperativeMatrixFlexibleDimensionsPropertiesNV);
	VkResult vkCreateAccelerationStructureKHR(device: VkDevice, pCreateInfo: *VkAccelerationStructureCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pAccelerationStructure: *VkAccelerationStructureKHR);
	void vkDestroyAccelerationStructureKHR(device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: *VkAllocationCallbacks);
	void vkCmdBuildAccelerationStructuresKHR(commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: *VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **VkAccelerationStructureBuildRangeInfoKHR);
	void vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: *VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: *VkDeviceAddress, pIndirectStrides: *uint32, ppMaxPrimitiveCounts: **uint32);
	VkResult vkBuildAccelerationStructuresKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: uint32, pInfos: *VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **VkAccelerationStructureBuildRangeInfoKHR);
	VkResult vkCopyAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyAccelerationStructureInfoKHR);
	VkResult vkCopyAccelerationStructureToMemoryKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyAccelerationStructureToMemoryInfoKHR);
	VkResult vkCopyMemoryToAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyMemoryToAccelerationStructureInfoKHR);
	VkResult vkWriteAccelerationStructuresPropertiesKHR(device: VkDevice, accelerationStructureCount: uint32, pAccelerationStructures: *VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: size_t, pData: *void, stride: size_t);
	void vkCmdCopyAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: *VkCopyAccelerationStructureInfoKHR);
	void vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer: VkCommandBuffer, pInfo: *VkCopyAccelerationStructureToMemoryInfoKHR);
	void vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: *VkCopyMemoryToAccelerationStructureInfoKHR);
	VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(device: VkDevice, pInfo: *VkAccelerationStructureDeviceAddressInfoKHR);
	void vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: *VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32);
	void vkGetDeviceAccelerationStructureCompatibilityKHR(device: VkDevice, pVersionInfo: *VkAccelerationStructureVersionInfoKHR, pCompatibility: *VkAccelerationStructureCompatibilityKHR);
	void vkGetAccelerationStructureBuildSizesKHR(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: *VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: *uint32, pSizeInfo: *VkAccelerationStructureBuildSizesInfoKHR);
	void vkCmdTraceRaysKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *VkStridedDeviceAddressRegionKHR, width: uint32, height: uint32, depth: uint32);
	VkResult vkCreateRayTracingPipelinesKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: *VkRayTracingPipelineCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline);
	VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: size_t, pData: *void);
	void vkCmdTraceRaysIndirectKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress);
	VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(device: VkDevice, pipeline: VkPipeline, group: uint32, groupShader: VkShaderGroupShaderKHR);
	void vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer: VkCommandBuffer, pipelineStackSize: uint32);
	void vkCmdDrawMeshTasksEXT(commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32);
	void vkCmdDrawMeshTasksIndirectEXT(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32);
	void vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32);
}